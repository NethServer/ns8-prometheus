#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import os

import jsonschema
from jsonschema import validate
import agent

# connect to client and fetch providers for prometheus
redis_client = agent.redis_connect(use_replica=True)
providers = agent.list_service_providers(redis_client, 'prometheus-metrics', 'http')

loki = redis_client.get("cluster/default_instance/loki")
logcli = redis_client.hgetall(f'module/{loki}/environment')
# we want to build the loki address
logcli["LOKI_ADDR"] = logcli["LOKI_ADDR"]+':'+logcli["LOKI_HTTP_PORT"]

with open('prometheus.yml', 'w', encoding='utf-8') as fp:
    fp.write("global:\n")
    fp.write("scrape_configs:\n")
    fp.write('  - job_name: "loki"\n')
    fp.write('    basic_auth:\n')
    fp.write(f'      username: "{logcli["LOKI_API_AUTH_USERNAME"]}"\n')
    fp.write(f'      password: "{logcli["LOKI_API_AUTH_PASSWORD"]}"\n')
    fp.write('    static_configs:\n')
    fp.write(f'      - targets: ["{logcli["LOKI_ADDR"].removeprefix("http://")}"]\n')
    fp.write('  - job_name: "providers"\n')
    fp.write('    file_sd_configs:\n')
    fp.write('      - files:\n')
    fp.write('        - "/prometheus/prometheus.d/*.yml"\n')

# Get validation file from bin directory
with open('../bin/validation.json', 'r', encoding='utf-8') as file:
    schema = json.load(file)

for provider in providers:
    # load provider info and validate
    configuration = json.loads(provider['config'])
    try:
        validate(instance=configuration, schema=schema)
    except jsonschema.exceptions.ValidationError as err:
        print(f"Service provider {provider['module_id']} returned non-valid data.")
        continue

    # Generate configuration file
    with open(f"prometheus.d/{provider['module_id']}.yml", 'w', encoding='utf-8') as file:
        file.write('- targets:\n')
        for target in configuration['hosts']:
            file.write(f"    - '{target}'\n")
        file.write('  labels:\n')
        file.write(f"    node: {provider['node']}\n")
        file.write(f"    module: {provider['module_id']}\n")
        for key, value in configuration['labels'].items():
            file.write(f"    {key}: {value}\n")

# Check if configuration files exists for non returning service provider
with os.scandir('prometheus.d') as it:
    files = list(map(lambda provider: f"{provider['module_id']}.yml", providers))
    for entry in it:
        # delete the file if it's not a provider.
        if entry.is_file() and entry.name not in files:
            os.remove(entry.path)
